Create a unit test class and experiment with EntityManager and Repository.
Do not mark tests with @Transactional to avoid conflicts when testing transactional code,
clean the database after each test instead.
Capture results as unit test assertions and capture your thoughts in the markdown file.
Discuss it with a mentor.


1. Select one of the One-To-Many relationships in your domain. We will call its parts as Parent and Child (one Parent has many Children)

2. Enable JPA query logging for tests to see which queries are getting generated by the JPA

3. Save Parent without ID using repository.save(), entityManager.persist(), entityManager.merge(). Compare the results.

4. Save Parent with an initialized ID using repository.save(), entityManager.persist(), entityManager.merge(). Compare the results.

5. Insert Parent with some ID to the database. Save another Parent with the same ID using repository.save(), entityManager.persist(), entityManager.merge(). Compare the results.

6. Save Parent with Children, which are not present in the database - using the same 3 approaches

7. Save Parent with Children, which are already present in the database - using the same 3 approaches

8. Save Child without Parent - using the same 3 approaches

9. Save Child with Parent initialized, but not present in the database - using the same 3 approaches

10. Save Child with Parent initialized, present in the database, but detached from EntityManager/Session - using the same 3 approaches

11. Fetch the Parent with JpaRepository, try changing it and don’t save it explicitly. Flush the session and check whether the changes were propagated to the database

12. Start the transaction, fetch the Parent with JpaRepository, try changing it and don’t save it explicitly. Flush the session and check whether the changes were propagated to the database
